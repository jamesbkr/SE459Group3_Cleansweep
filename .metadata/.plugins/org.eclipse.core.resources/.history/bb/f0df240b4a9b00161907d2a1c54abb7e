package vacuum;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import room.CleanRoom;
import room.Point;

/*
 * 
 * VACUUM CLASS
 * The vacuum is aware of the room it is in and positions on all 4 sides of it.  
 * 
 * 
 */


import room.Room;
import room.RoomStatus;
import room.ThingsInRoom;
import sensor.Sensor;
import sensor.SensorFactory;

public class Vacuum {
	
	//General variables for the vacuum
	int storage = 50;
	int batteryLife = 100;
	String name;
	
	//The room that is being searched
	private Room room;
	Room CleanedRoom;
	Point currentLocation;
	
	//makelinkedlist
	
	//Setup the things that the Rumba is aware of in the room.
	ThingsInRoom front = ThingsInRoom.NOTHING;
	ThingsInRoom back = ThingsInRoom.NOTHING;
	ThingsInRoom left = ThingsInRoom.NOTHING;
	ThingsInRoom right = ThingsInRoom.NOTHING;
	ThingsInRoom[] thingsArray = {right,left,back,front};
	
	ThingsInRoom center = ThingsInRoom.BASE;

	//Sensors and Sensor Array to add more sensors just add them to array
	Sensor rightSensor;
	Sensor leftSensor;
	Sensor backSensor;
	Sensor frontSensor;	
	public Sensor[] sensorArray ;
	
	//Sensor Factory to build sensors
	SensorFactory sensorBuilder; 
	
	//constructor
	public Vacuum(String name,  HashMap<Point,RoomStatus> room){
		this.name = name;
		this.setRoom(new Room(room));
		
		currentLocation = new Point(0,0);
		this.getRoom().updateLocation(currentLocation, new RoomStatus(ThingsInRoom.BASE,CleanRoom.CLEAN));
		
		
		sensorBuilder = new SensorFactory();
		rightSensor = sensorBuilder.buildFrontSensor();
		leftSensor = sensorBuilder.buildLeftSensor();
		backSensor = sensorBuilder.buildBackSensor();
		frontSensor = sensorBuilder.buildFrontSensor();	
	}
	
	//constructor
	public Vacuum(String name){
		this.name = name;
		this.setRoom(new Room());
		currentLocation = new Point(0,0);
		getRoom().updateLocation(currentLocation, new RoomStatus(ThingsInRoom.BASE,CleanRoom.CLEAN));
		
		
/*		for(Point p : room.getRoom().keySet()){
			room.updateLocation(p, new RoomStatus(ThingsInRoom.NOTHING, ThingsInRoom.DIRTY));		
		}
*/		
		
		sensorBuilder = new SensorFactory();
		rightSensor = sensorBuilder.buildFrontSensor();
		leftSensor = sensorBuilder.buildLeftSensor();
		backSensor = sensorBuilder.buildBackSensor();
		frontSensor = sensorBuilder.buildFrontSensor();	
		this.sensorArray =new Sensor[] 	{rightSensor, 
		                              leftSensor , 
		                              backSensor, 
		                              frontSensor} ;
	}
	
	
	
	
	
	//how to run the vacuum.
	public void run(){
		System.out.println(getRoom().toString());
		
		move();
	}
	
	public Point getCurrentLocation(){
		return this.currentLocation;
	}
	
	//Function to check the amount that is in the vacuum.
	public int checkStorage(){
		return this.storage;
	}
	// Function to check amount of batterlife in the vacuum
	public int checkBatteryLife(){
		return this.batteryLife;
	}
	// Function to check Sensor Array
	public Sensor[] checkSensor(){
		return this.sensorArray;
	}
	
	
	private Point getNextMove(Point p){
		int x = p.getX();
		int y = p.getY();
		
		Point left = new Point(x-1,y);
		Point front = new Point(x,y+1);
		Point right = new Point(x+1,y);
		Point back = new Point(x,y-1);
		
		if(room.getRoom().containsKey(left)){
			return left;
		}else if (room.getRoom().containsKey(front)){
			return front;
		}else if (room.getRoom().containsKey(right)){
			return right;
		}else if (room.getRoom().containsKey(back)){
			return back;
		}else{
			return null;
		}
	}
	
	// Move the vacuum
	//this is a recursive function.  
	private void move(){
	
			Point nextPoint = getNextMove(this.currentLocation);
			
			//Update Sensors
			for(int i=0;i<=3;i++){
				thingsArray[i] = sensorArray[i].sense(nextPoint);
			}

			
			
			//set the point infront of the vacuum to the new location based on the grid
			Point FrontPoint = new Point(currentLocation.getX()+1,currentLocation.getY());
			Point BackPoint = new Point(currentLocation.getX()-1,currentLocation.getY());
			Point LeftPoint = new Point(currentLocation.getX(),currentLocation.getY()+1);
			Point RightPoint = new Point(currentLocation.getX(),currentLocation.getY()-1);
			
			
			//updating the room to have the new point and the status of the room.  this status is set from the sensors and assumed to be dirty
			//once the vacuum travels over the location, it will then decide if it is dirty or not using the downward sensor. 
			getRoom().updateLocation(FrontPoint, new RoomStatus(front,CleanRoom.DIRTY));
			getRoom().updateLocation(BackPoint, new RoomStatus(back,CleanRoom.DIRTY));
			getRoom().updateLocation(LeftPoint, new RoomStatus(right,CleanRoom.DIRTY));
			getRoom().updateLocation(RightPoint, new RoomStatus(left,CleanRoom.DIRTY));

			
			
			//if the front is clear it goes forward.  if the not it looks left then right then back.  
			//if all are not clear, it then initiates the shutdown protocal.
			if((getRoom().checkTypeOfFloor(FrontPoint)!=ThingsInRoom.OBSTACLE)){
				currentLocation = FrontPoint;
				
				this.move();
			}
			else if( (getRoom().checkTypeOfFloor(LeftPoint)!=ThingsInRoom.OBSTACLE)){
				currentLocation = LeftPoint;
				this.move();
			}
			else if( (getRoom().checkTypeOfFloor(RightPoint)!=ThingsInRoom.OBSTACLE)){
				
				currentLocation = RightPoint;
				this.move();
			}
			else if((getRoom().checkTypeOfFloor(BackPoint)!=ThingsInRoom.OBSTACLE)){
				currentLocation = BackPoint;
				
				this.move();
			}
			else{
				
				System.out.println("There is no place to go.  all sensors are covered by an obtacle");
				this.shutDown(currentLocation);
				
			}
		
		}
		
		
	
	//Return to base function.  This will be called when the vacuum is filled.  
	//Then need to be changed to be induced when the vacuum is running out of battery.
	public Point returnToBase() {
		// TODO Auto-generated method stub
		return new Point(0,0);
	}
	
	
	public Point shutDown(Point p){
		System.out.println("THERE IS NO WHER TO GO>   SHUTTING DOWN at location " +p.toString());
		return p;
	}
	
	
	
	//To String function
	public String toString(){
		return "HELLO FROM " +  this.name;
	}

	public Room getRoom() {
		return room;
	}

	public void setRoom(Room room) {
		this.room = room;
	}
}
