package swing;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;

import room.Point;
import room.RoomStatus;
import util.AnimatorBuilder;
import util.Animator;
import util.SwingAnimator;
import util.SwingAnimatorPainter;


/**
 * A class for building Animators.
 */
public class SwingAnimatorBuilder implements AnimatorBuilder {
	MyPainter painter;
	public SwingAnimatorBuilder() {
//		skipInit = VP.gap;
//		skipRoad = VP.gap + MP.roadLength;
//		skipCar = VP.gap + VP.elementWidth;
		
		painter = new MyPainter();
	}
	public Animator getAnimator() {
		if (painter == null) { throw new IllegalStateException(); }
		Animator returnValue = new SwingAnimator(painter, "Traffic Simulator",
				VP.displayWidth, VP.displayHeight, VP.displayDelay);
		painter = null;
		return returnValue;
	}
	
	@Override
	public void addLocation(Point p, RoomStatus rs) {
		// TODO Auto-generated method stub
		Translator t = new TranslatorSquare((double)p.getX(),(double)p.getY(),5.0,5.0,1.0);
		painter.addSquare(p,t);
		
	}
//	private static double skipInit = VP.gap;
//	private static double skipRoad = VP.gap + MP.roadLength;
//	private static double skipCar = VP.gap + VP.elementWidth;
//	private static double skipRoadCar = skipRoad + skipCar;
//	private static double skipLight = MP.intersectionLength + VP.gap;
//	public void addLight(Light d, double i, double j) {
//		double x = skipInit + skipRoad + j*skipRoadCar;
//		double y = skipInit + skipRoad + i*skipRoadCar;
//		Translator t = new TranslatorWE(x, y, MP.carLength, VP.elementWidth, VP.scaleFactor);
//		painter.addLight(d,t);
//	}
	
///NNENNEEENEEEEEEEEEEEEED TO CHANGE BACK TO THE ORIGIONAL EW WE AND NS SN
//	public void addHorizontalRoad(Road l, int i, int j, boolean eastToWest) {
//		double x = skipInit + j*skipRoadCar;
///		double y = skipInit + skipRoad + i*skipRoadCar;
//		Translator t = eastToWest ? new TranslatorWE(x, y, MP.roadLength, VP.elementWidth, VP.scaleFactor)
//				: new TranslatorWE(x, y, MP.roadLength, VP.elementWidth, VP.scaleFactor);
//		painter.addRoad(l,t);
//	}
//	public void addVerticalRoad(Road l, int i, int j, boolean southToNorth) {
//		double x = skipInit + skipRoad + j*skipRoadCar;
//		double y = skipInit + i*skipRoadCar;
//		Translator t = southToNorth ? new TranslatorNS(x, y, MP.roadLength, VP.elementWidth, VP.scaleFactor)
//				: new TranslatorNS(x, y, MP.roadLength, VP.elementWidth, VP.scaleFactor);
//		painter.addRoad(l,t);
//	}


	/** Class for drawing the Model. */
	private static class MyPainter implements SwingAnimatorPainter {
		private List<Element<Point>> Points;
			
		MyPainter(){
			Points = new ArrayList<Element<Point>>();
		}
		
		
		/** Pair of a model element <code>x</code> and a translator <code>t</code>. */
		private static class Element<T> {
			T x;
			Translator t;
			Element(T x, Translator t) {
				this.x = x;
				this.t = t;
			}
		}
		
		void addSquare(Point x,Translator t){
			Points.add(new Element<Point>(x,t));
		}
		
		public void paint(Graphics args){}
//		private List<Element<Road>> roadElements;
//		private List<Element<Light>> lightElements;
//		MyPainter() {
//			roadElements = new ArrayList<Element<Road>>();
//			lightElements = new ArrayList<Element<Light>>();
//		}
//		void addLight(Light x, Translator t) {
//			lightElements.add(new Element<Light>(x,t));
//		}
//		void addRoad(Road x, Translator t) {
//			roadElements.add(new Element<Road>(x,t));
//		}

//		public void paint(Graphics g) {
			// This method is called by the swing thread, so may be called
			// at any time during execution...

			// First draw the background elements
//			for (Element<Light> e : lightElements) {
//				if (e.x.getState() == 0) {
//					g.setColor(Color.GREEN);
//				}else if (e.x.getState()==1){
//					g.setColor(Color.YELLOW);
//				}else {
//					g.setColor(Color.RED);
//				}
//				XGraphics.fillOval(g, e.t, 0, 0, MP.carLength, VP.elementWidth);
//			}
//			g.setColor(Color.BLACK);
//			for (Element<Road> e : roadElements) {
//				XGraphics.fillRect(g, e.t, 0, 0, MP.roadLength, VP.elementWidth);
//			}

			// Then draw the foreground elements
//			for (Element<Road> e : roadElements) {
//				// iterate through a copy because e.x.getCars() may change during iteration...
//				for (Car d : e.x.getCars().toArray(new Car[0])) {
//					g.setColor(d.getColor());
//					XGraphics.fillOval(g, e.t, d.currentPosition(), 0, d.length, VP.elementWidth);
//				}
//			}
//		}
//	}
}


}

